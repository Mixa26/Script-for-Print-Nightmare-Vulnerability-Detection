import subprocess

#The problem arrised in June 2021 to my knowledge

def checkWindowsPatchVersionIsSafe():
    #Microsoft solved this problem with patches, so first we check that

    #Found this HotFixId to be safe from print nightmare as stated here https://answers.microsoft.com/en-us/windows/forum/all/how-do-i-check-to-see-if-my-w10x64-machine-is/35b2eebd-de9b-4f81-8872-780125bb3ea1
    safe_printer_patch = 5004945

    #This command lists out all the updates related to security, so we check if our system at least has a safe windows version on it.
    getHotFixIdVersionCommand = ["powershell", "(Get-HotFix", "-Description", "Security*", "|", "Sort-Object", "-Property", "InstalledOn)[-1].HotFixId.substring(2)"]

    #We get the last HotFixId of our update, and if it's lower than safe_printer_patch, the system is not safe.
    if int(subprocess.run(getHotFixIdVersionCommand, capture_output=True, text=False).stdout.decode('utf-8').strip()) < safe_printer_patch:
        print("The windows version you're running is not safe from print nightmare, update your system to at least HotFixId KB", safe_printer_patch)
        return False
    
    print("You're windows version is safe from print nightmare, so the spooler service shouldn't cause a vulnerability even if it's running.")
    return True

def checkSpoolerServiceStatus():
    #The exploit involves the spooler sevice which is used to run jobs on the printer,
    #so a hacker would try to get the printer to install new malicious drivers through it.
    #If it's running and we have an unsafe outdated Windows version, we're maybe in trouble.

    #This command gets 
    getSpoolerStatusCommand = ["powershell", "(Get-Service", "\"Print", "Spooler\").Status"]

    #If the Spooler is running, report a vulnerability
    if subprocess.run(getSpoolerStatusCommand, capture_output=True, text=False).stdout.decode('utf-8').strip() == "Running":
        print("Spooler sevice is running, shut it down for preventive measures!")
        print("Use: \'Service-Stop -Name \"Spooler\" -Verbose\' in powershell to achieve this.")
        return False

    print("Spooler is not running, your PC is fine.")
    return True

def checkRegistryForSuspiciousKeys():
    #There are certain registry keys/settings that indicate a exploit might've happened

    getPointAndPrintCommand = ["powershell", "Test-Path", "\"HKLM:\SOFTWARE\Policies\Microsoft\Windows", "NT\Printers\PointAndPrint\""]

    #We check for path HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Printers\PointAndPrint
    if bool(subprocess.run(getPointAndPrintCommand, capture_output=True, text=False).stdout.decode('utf-8')):

        #If it exists we need to check if NoWarningNoElevationOnInstall or UpdatePromptSettings exists and is set to True
        noElevationOnInstallCommand = ["powershell", "Get-ItemProperty", "-Path", "\"HKLM:\SOFTWARE\Policies\Microsoft\Windows", "NT\Printers\PointAndPrint\"", "|", "Select-Object", "-ExpandProperty", "\"NoWarningNoElevationOnInstall\"", "-ErrorAction", "Stop", "|", "Out-Null"]
        check1 = False
        updatePromptSettingsCommand = ["powershell", "Get-ItemProperty", "-Path", "\"HKLM:\SOFTWARE\Policies\Microsoft\Windows", "NT\Printers\PointAndPrint\"", "|", "Select-Object", "-ExpandProperty", "\"UpdatePromptSettings\"", "-ErrorAction", "Stop", "|", "Out-Null"]
        check1 = False

        check1 = subprocess.run(noElevationOnInstallCommand, capture_output=True, text=False).stdout.decode('utf-8') == "True"
        check2 = subprocess.run(updatePromptSettingsCommand, capture_output=True, text=False).stdout.decode('utf-8') == "True"

        #If so, the system might be vulnerable
        if (check1):
            print("NoWarningNoElevationOnInstall exists and is set to True! System is likely vulnerable!")
            return False
        
        if (check2):
            print("UpdatePromptSettings exists and is set to True! System is likely vulnerable!")
            return False
        
    #Otherwise we are safe
    print("Registry setting does not exist, system is ok.")
    return True

#We will run all the tests in this order
#and if any succeed we can mark the whole
#vulnerability test as passed!
def runAllVulnerabilityChecks():
    if checkWindowsPatchVersionIsSafe():
        return True
    if checkSpoolerServiceStatus():
        return True
    if checkRegistryForSuspiciousKeys():
        return True
    return False
    
if runAllVulnerabilityChecks():
    print("Your system is safe!")
else:
    print("Your system is not safe!")